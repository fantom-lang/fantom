**************************************************************************
** title:      Statements
** author:     Brian Frank
** created:    14 Aug 07
** copyright:  Copyright (c) 2007, Brian Frank and Andy Frank
** license:    Licensed under the Academic Free License version 3.0
**************************************************************************

Local Declarations [#localDef]
******************************
  Str s
  Str s := "hello"
  s := "hello"
  list := [0, 1, 2]

See [docLang]`docLang::Statements#localDef` for details.

If/Else [#if]
*****************
  if (cond)
    doIt

  if (cond)
    doIt
  else
    dontDoIt

  if (cond1)
    do1
  else if (cond2)
    do2
  else
    do3

See [docLang]`docLang::Statements#if` for details.

While [#while]
**************
  while (cond)
    doSomething

  while (x)
  {
    if (y) continue
    if (z) break
    doSomething
  }

See [docLang]`docLang::Statements#while` for details.

For [#for]
**********
  for (i:=0; i<3; ++i)
    echo(i)

  for (;;)
  {
    if (y) continue
    if (z) break
    doSomething
  }

See [docLang]`docLang::Statements#for` for details.

Switch [#switch]
****************
  switch (method)
  {
    case "head":
    case "get":
      serviceGet
    case "post":
      servicePost
    default:
      serviceBadMethod
  }

See [docLang]`docLang::Statements#switch` for details.

Throw [#throw]
**************
  throw ArgErr()
  throw Err("something bad happened")

See [docLang]`docLang::Exceptions#throw` for details.

Try/Catch [#tryCatch]
*********************
  try
  {
    doSomething
  }
  catch
  {
    echo("any err thrown")
  }

  try
  {
    doSomething
  }
  catch (IOErr e)
  {
    e.trace
  }

  try
  {
    doSomething
  }
  catch (IOErr e)
  {
    handleIOErr(e)
  }
  catch (ArgErr e)
  {
    throw e // rethrow
  }
  catch
  {
    e.trace // anything else
  }

See [docLang]`docLang::Exceptions#try` for details.

Try/Finally [#tryFinally]
*************************

  try
  {
    doSomething
  }
  finally
  {
    cleanup
  }

  try
  {
    doSomething
  }
  catch (Err e)
  {
    e.trace
  }
  finally
  {
    cleanup
  }

See [docLang]`docLang::Exceptions#finally` for details.





