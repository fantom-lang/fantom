**************************************************************************
** title:      Json
** author:     Kevin McIntire
** created:    09 Dec 08
** copyright:  Copyright (c) 2008, Brian Frank and Andy Frank
** license:    Licensed under the Academic Free License version 3.0
**************************************************************************

Overview [#overview]
********************
The [json]`json::index` API provides basic serialization between Fantom Maps,
Lists, and most primitives with Javascript Object Notation (JSON).

There are plans to provide detailed type information about Fantom types as
part of the JSON serialization at some point, but currently the following
are supported:
 - [Map]`sys::Map`
 - [List]`sys::List`
 - [String]`sys::Str`
 - [Uri]`sys::Uri`
 - [Duration]`sys::Duration`
 - [Bool]`sys::Bool`
 - [String]`sys::Str`
 - All numeric types
 - nulls

Refer to [json.org]`http://www.json.org` for more information.

Writing Json [#write]
*********************
Writing a Map is accomplised via [write]`json::Json.write` which writes
a given map to an [OutStream]`sys::OutStream`.  To write to standard out:

  map := ["key":"value", "intKey":123]
  Json.write(map, Sys.out)

Reading Json [#read]
********************
Reading JSON takes raw JSON from a stream and produces a [Map]`sys::Map`.

Given the following json:
  str := "{\"k1\":\"v1\", \"k2\":3.4159, \"k3\":[1,2,3], \"k4\": {\"m1\":true, \"m2\":null}}"

  input := InStream.makeForStr(str)
  Str:Obj? data = Json.read(input)
  data["k1"] -> "v1"