**************************************************************************
** title:      Controls
** author:     Andy Frank
** created:    11 Jan 2017
** copyright:  Copyright (c) 2017, Brian Frank and Andy Frank
** license:    Licensed under the Academic Free License version 3.0
**************************************************************************

Overview [#overview]
********************
Controls are the "widgets" users interact with on a page. Domkit includes a
standard set of controls that can be used to build UIs:

 - [Button]`#button`
 - [ButtonGroup]`#buttonGroup`
 - [Checkbox]`#checkbox`
 - [Combo]`#combo`
 - [FilePicker]`#filePicker`
 - [Label]`#label`
 - [ListButton]`#listButton`
 - [Link]`#link`
 - [Menu]`#menu`
 - [ProgressBar]`#progressBar`
 - [RadioButton]`#radioButton`
 - [Table]`#table`
 - [TextArea]`#textArea`
 - [TextField]`#textField`
 - [ToggleButton]`#toggleButton`
 - [Tooltip]`#tooltip`
 - [Tree]`#tree`


Button [#button]
****************
[Button]`domkit::Button` is a widget that invokes an action when pressed.

  Button
  {
    it.text = "Press me"
    it.onAction { echo("Pressed!") }
  }

  Button
  {
    it.add(Elem("b") { it.text="Really Press me!" })
    it.onAction { echo("Pressed!") }
  }

![Button][242×41]`Control-Button-1.png`

See [Button]`domkit::Button` for full API details.

See also: [ToggleButton]`#toggleButton`, [ListButton]`#listButton`

ButtonGroup [#buttonGroup]
**************************
[ButtonGroup]`domkit::ButtonGroup` groups a set of toggle or radio buttons and
handles making sure only one button in group is selected at a time.

  group := ButtonGroup
  {
    it.add(ToggleButton { ... })
    it.add(ToggleButton { ... })
    it.add(ToggleButton { ... })
  }

  group.selIndex = 1      // set group selection
  sel := group.selIndex   // get current selection

See [ButtonGroup]`domkit::ButtonGroup` for full API details.

See also: [ToggleButton]`#toggleButton`, [RadioButton]`#radioButton`

Checkbox [#checkbox]
********************
[Checkbox]`domkit::Checkbox` displays a checkbox that can be toggled on and off.

  Checkbox {}
  Checkbox { it.checked = true }

On its own, only the actual checkbox is displayed.  Generally its desirable
to display a text label attached to the checkbox.  You can extend the click
target area to this label using the [wrap]`domkit::Checkbox.wrap` method:

  Checkbox {}.wrap("You can click here too!")

![Checkbox][181×98]`Control-Checkbox-1.png`

To receive callbacks when the state changes, add an
[onAction]`domkit::Checkbox.onAction` event handler:

  Checkbox
  {
    it.onAction |c| { echo("checked: $c.checked") }
  }

See [Checkbox]`domkit::Checkbox` for full API details.

Combo [#combo]
**************
[Combo]`domkit::Combo` combines a TextField and ListButton into a single widget
that allows a user to select from a list or manually enter a value. The
internal [TextField]`domkit::TextField` component is available with
[Combo]`domkit::Combo`. In practice you will interact with Combo the same as
[TextField]`domkit::TextField`, so [Combo.field]`domkit::Combo.field` is the
right place to register event callbacks such as 'onModify' and 'onAction'.

  Combo
  {
    it.items = ["Alpha, "Beta", "Gamma"]
    it.field.onAction |f| { echo("value: $f.val") }
  }

![Combo][208×44]`Control-Combo-1.png`

See [Combo]`domkit::Combo` for full API details.

FilePicker [#filePicker]
************************
[FilePicker]`domkit::FilePicker` allows selection of files to upload from the
client browser.

For simple form uploads, FilePicker is backed by an '<input type="file">' so
can be enabled just by giving a name when inside a '<form>':

  FilePicker { it->name="upload" }

To configure what file types can be selected, or to enable multiple selection:

  FilePicker
  {
    it.accept = "image/*"   // allow only images
    it.multi  = true        // allow multiple files to upload
  }

To receive callbacks when a file is selected, add an
[onSelect]`domkit::FilePicker.onSelect` event handler:

  FilePicker
  {
    it.onSelect |p| { ... }
  }

The list of selected files can be introspected client-side via the
[files]`domkit::FilePicker.files` field:

  // list of files
  files := picker.files

  f.name    // filename of file
  f.size    // size of file
  f.type    // MIME type of file

  // async load file contents as a text string client-side
  f.readAsText |text| { ... }

  // async load file contents and encode as a data:// URI client-side
  f.readAsDataUri |uri| { ... }

See [FilePicker]`domkit::FilePicker` and [DomFile]`dom::DomFile` for full API
details.

Label [#label]
**************
[Label]`domkit::Label` simply displays text content. Labels are designed to
naturally align vertically with control widgets like [Button]`domkit::Button`:

  Label { it.text="My Label" }

See [Label]`domkit::Label` for full API details.

ListButton [#listButton]
************************
[ListButton]`domkit::ListButton` allows user selection of a list item by
showing a listbox popup when a button is pressed:

  ListButton
  {
    it.items = ["Alpha", "Beta", "Gamma"]
    it.onSelect |b| { echo("Selected $b.sel.item") }
  }

![ListButton][82×38]`Control-ListButton-1.png`

By default [ListButton]`domkit::ListButton` will display items using 'toStr'.
To customize how the display element is is created, use
[onElem]`domkit::ListButton.onElem`:

  ListButton
  {
    it.items = [1,2,3,4]
    it.onElem |v| { "Item #$v" }
  }

![ListButton][147×178]`Control-ListButton-2.png`

See [ListButton]`domkit::ListButton` for full API details.

Link [#link]
************
[Link]`domkit::Link` creates an '<a>' tag for links:

    Link
    {
      it.uri  = `http://fantom.org`
      it.text = "Fantom"
    }

Use [target]`domkit::Link.target` to specify a link target:

    Link
    {
      it.uri    = `http://fantom.org`
      it.text   = "Fantom"
      it.target = "_blank"
    }

See [Link]`domkit::Link` for full API details.

Menu [#menu]
************
TODO

ProgressBar [#progressBar]
**************************
TODO

RadioButton [#radioButton]
**************************
TODO

Table [#table]
**************
TODO

TextArea [#textArea]
********************
TODO

TextField [#textField]
**********************
TODO

ToggleButton [#toggleButton]
****************************
[ToggleButton]`domkit::ToggleButton` models a boolean state toggled by pressing a button:

  ToggleButton
  {
    it.text = "Toggle Me"
    it.onAction |b| { echo("state: $b.selected") }
  }

The content may be modified based on selected state by specifying
[elemOn]`domkit::ToggleButton.elemOn` and
[elemOff]`domkit::ToggleButton.elemOff`:

  ToggleButton
  {
    it.elemOn  = Elem { it.text="On" }
    it.elemOff = Elem { it.text="Off" }
    it.selected = false   // make sure to set default state last
  }

You may also pass any object to 'elemOn' and 'elemOff' and the Elem
instance will be created using 'Obj.toStr':

  ToggleButton
  {
    it.elemOn  = "On"
    it.elemOff = "Off"
    it.selected = false
  }

![ToggleButton][311×50]`Control-ToggleButton-1.png`

See [ToggleButton]`domkit::ToggleButton` for full API details.

Tooltip [#tooltip]
******************
TODO

Tree [#tree]
************
TODO
