**************************************************************************
** title:      Layout
** author:     Andy Frank
** created:    11 Jan 2017
** copyright:  Copyright (c) 2017, Brian Frank and Andy Frank
** license:    Licensed under the Academic Free License version 3.0
**************************************************************************

Overview [#overview]
********************
Since DomKit "widgets" are simply HTML + CSS, they can be placed most anywhere
in the DOM tree. However, since DomKit is specifically targeted at building
rich user interfaces, it includes some standard layout containers to simplify
constructing common UI designs:

 - [Box]`#box`
 - [GridBox]`#gridBox`
 - [FlowBox]`#flowBox`
 - [SashBox]`#sashBox`

Box [#box]
**********
[Box]`domkit::Box` is the base class for [Elems]`dom::Elem` who are intended to
layout out their children in a specific way. Box defaults several CSS
properties to simplify composition:

  display: block;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: relative;

GridBox [#gridBox]
******************
[GridBox]`domkit::GridBox` lays out children in a table format with a fixed
number of columns and rows.

Example [#gridBoxEx]
====================

  GridBox
  {
    it.cellStyle("all", "all",  "padding: 4px")
    it.cellStyle("all", "even", "background: #f8f8f8")
    it.cellStyle("all",     4,  "background: #e8e8e8; border-top: 1px solid #ccc")

    it.addRow([Label {
      it.text = "Enter User Information"
      it.style->fontWeight = "bold"
    }], [2])
    it.addRow([Label { it.text="First Name:"  }, TextField {}])
    it.addRow([Label { it.text="Middle Name:" }, TextField {}])
    it.addRow([Label { it.text="Last Name:"   }, TextField {}])
    it.addRow([null, Button { it.text="Submit" }])
  }

![GridBox]`Layout-GridBox.png`

cellStyle [#gridBoxCellStyle]
=============================
The [cellStyle]`domkit::GridBox.cellStyle` command may be used to stylize
groups of cells. Valid values for 'col' and 'row':

  - Specific index (0, 1, 2, etc)
  - Range of indexes (0..4, 7..<8, etc)
  - "all":  apply to all row or columns
  - "even": apply only to even row or columns indexes
  - "odd":  apply only to odd row or column indexes

  cellStyle("all",   "all", "padding: 4px")
  cellStyle("all",   "odd", "padding: 4px")
  cellStyle(    0,       1, "padding: 4px")
  cellStyle(    3,    2..5, "padding: 4px")

addRow [#gridBoxAddRow]
=======================
Children are added to a GridBox a row at a time using
[addRow]`domkit::GridBox.addRow`. If 'null' is passed for any position on the
row, that cell will be left empty:

   // leave first cell empty
   it.addRow([null, Button { it.text="Submit" }])

Optionally, [addRow]`domkit::GridBox.addRow` takes an argument that can specify
that child cells should span multiple columns:

   // pass a single child, but specify it should span 2 columns
   it.addRow([Label {
     it.text = "Enter User Information"
     it.style->fontWeight = "bold"
   }], [2])

The 'colspan' argument may be applied to multiple children, and the list values
correspond to the child list position:

  // Add two children, where child1 spans 2 colums, and child2 3 columns
  grid.addRow([child1, child2], [2,3])

halign [#gridBoxHalign]
=======================
By default `domkit::GridBox` will use preferred sizes for all child cells. This
will often times leave free space around the GridBox. To adjust how the GridBox
is positioned in this space use `domkit::GridBox.halign`:

  GridBox { it.halign = Align.center }

FlowBox [#flowBox]
******************
[FlowBox]`domkit::FlowBox` lays out child nodes side-by-side horizontally.

  FlowBox
  {
    Button { it.text="Alpha" },
    Button { it.text="Beta"  },
    Button { it.text="Gamma" },
  }

![FlowBox-1]`Layout-FlowBox-1.png`

The alignment of children inside a FlowBox can be adjusted using
[halign]`domkit::FlowBox.halign`:

  FlowBox
  {
    it.halign = Align.center
    Button { it.text="Alpha" },
    Button { it.text="Beta"  },
    Button { it.text="Gamma" },
  }

![FlowBox-2]`Layout-FlowBox-2.png`

The spacing between each child can be configured use
[gaps]`domkit::FlowBox.gaps`, where each gap is the space between index and
index+1 children:

  FlowBox
  {
    it.gaps = ["4px", "16px"]
    Button { it.text="Alpha" },  // 4px gap after Alpha
    Button { it.text="Beta"  },  // 16px gap after Beta
    Button { it.text="Gamma" },
  }

![FlowBox-3]`Layout-FlowBox-3.png`

If a FlowBox contains more children than 'gaps', the 'gaps' list will be cycled
over the child list:

  FlowBox
  {
    it.gaps = ["4px", "1px"]
    Button { ... },   // 4px gap after
    Button { ... },   // 1px gap after
    Button { ... },   // 4px gap after
    Button { ... },
  }

  FlowBox
  {
    it.gaps = ["4px"]
    ...  // 4px gap between all children
  }

SashBox [#sashBox]
******************
TODO
