**************************************************************************
** title:      Dom
** author:     Andy Frank
** created:    11 Jan 2017
** copyright:  Copyright (c) 2017, Brian Frank and Andy Frank
** license:    Licensed under the Academic Free License version 3.0
**************************************************************************

Overview [#overview]
********************
When we refer to DomKit, we implicitly include the low-level [dom]`dom::index`
pod. And while this pod is a stand-alone API and can be used independently of
DomKit, it provides most of the heavy lifting for DomKit.

The Dom APIs generally track the W3C DOM specification verbatim so we can reuse
existing knowlege and terminology. But also so we avoid creating conflicts down
the line as new features are added by browser vendors.

This chapter will give a brief overview of the major [dom]`dom::index` API
features.

Win [#win]
**********
The [Win]`dom::Win` maps to the W3C Window object. Most API calls will stem
from the current Win instance:

  // get the current Win instance for this Window
  win := Win.cur

Some sample APIs available on [Win]`dom::Win`:

  win.alert("Hello!")  // display a modal dialog
  win.uri              // the URI for this page
  win.hyperlink(uri)   // hyperlink to new page
  win.hisBack          // go to previous page in session history
  win.viewport         // get size of window viewport

See [Win]`dom::Win` for complete API.

Doc [#doc]
**********
The [Doc]`dom::Doc` maps to the W3C Document object.

  // get the Doc for the current Win instance
  doc := Win.cur.doc

Some sample APIs available on [Doc]`dom::Doc`:

  doc.elem("someId")                // return the Elem with id='someId'
  doc.createElem("div")             // create a new <div> element
  doc.querySelector("div.foo")      // find first <div> element where class='foo'
  doc.querySelectorAll("div.bar")   // find all <div> elements where class='bar'

See [Doc]`dom::Doc` for complete API.

Elem [#elem]
************
The [Elem]`dom::Elem` maps to the W3C Element object.

  // create Elems
  Elem("div")   // create new unattached <div> element
  Elem("img")   // create new unattached <img> element

  // add Elem to parent
  p := Elem("p") { it.text="Lorem ipsum" }
  parent.add(p)

Attributes [#elemAttrs]
=======================
Elem attribute access APIs:

  elem["alt"]               // get an attr value
  elem["alt"] = "Alt text"  // set an attr value
  elem->alt                 // get an attr (equivalent to elem["alt"])
  elem->alt = "Alt text"    // set an attr (equivalent to elem["alt"] = "Alt text")
  elem.id                   // 'id' attribute
  elem.tagName              // tag name of this element
  elem.text = "Foo"         // set innerText content of this element
  elem.html = "<b>Foo</b>"  // set innerHTML content of this element

Note in the examples above the [trap]`sys::Obj.trap` operator can be used as a
convenience to [get]`dom::Elem.get` and [set]`dom::Elem.set`. Some Element
properties have a typed slot on Elem (such as 'id' and 'tagName'). The
get/set/trap methods can be used to access any property defined on the backing
W3C Element node.  This allows implementors to access any property without
requiring a Dom API update.

Tree Operations [#elemTree]
===========================
Methods for querying and modifying the DOM tree:

  elem.parent                   // parent element
  elem.prevSibling              // prev sibling
  elem.nextSibling              // next sibling
  elem.children                 // List of child elements
  elem.firstChild               // first child, or null if no children
  elem.lastChild                // last child, or null if no children
  elem.containsChild(child)     // is child a descendant of parent
  elem.add(child)               // add a new child element
  elem.replace(cur, newChild)   // replace a child with new element
  elem.remove(child)            // remove a child element
  elem.querySelector("img")     // find first <img> descendant
  elem.querySelectorAll("img")  // find all <img> descendants

See [Elem]`dom::Elem` for complete API.

Style [#style]
**************
[Style]`dom::Style` provides access to both inline and class CSS styling.

Events [#events]
****************
TODO

HttpReq (XmlHttpRequest) [#xhr]
*******************************
TODO

Session and Local Storage [#storage]
************************************
TODO

MutationObserver [#mutationObserver]
************************************
TODO
