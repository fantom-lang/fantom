using gfx
using fwt

class Demo
{
  static Void main()
  {
    Window
    {
      content = InsetPane
      {
        content = GridPane
        {
          numCols = 2
          hgap = 36
          GridPane
          {
            EventDemo { name = "A" },
            EventDemo { name = "B" },
            EventDemo { name = "C" },
          },
          ConsumeEventDemo("container")
          {
            bg = Color.blue
            content = Label { text = "Text"; bg = Color.white }
            ConsumeEventDemo.listen(content, "label")
          },
        },
      }
      it.onKeyDown.add |e| { echo("# onKeyDown: $e.key") }
      size = Size(400, 400)
    }.open
  }
}

class EventDemo : Canvas
{
  new make()
  {
    d := |e| { dump(e) }
    onMouseUp.add(d)
    onMouseDown.add(d)
    onMouseEnter.add(d)
    onMouseExit.add(d)
    onMouseMove.add(d)
    onMouseWheel.add(d)

    // Not supported
    // onMouseHover.add(d)
    // onFocus.add(d)
    // onBlur.add(d)
    // onKeyUp.add(d)
    // onKeyDown.add(d)
  }

  override Size prefSize(Hints hints := Hints.defVal) { return Size.make(100, 100) }

  override Void onPaint(Graphics g)
  {
    w := size.w
    h := size.h

    g.brush = Color.black
    g.drawRect(0, 0, w-1, h-1)
    g.drawText(name, 45, 40)
  }

  Void dump(Event event)
  {
    if (event.id == EventId.focus || event.id == EventId.blur)
      repaint

    echo("$name> $event")
  }

  Str? name
}

class ConsumeEventDemo : BorderPane
{
  new make(Str name)
  {
    listen(this, name)
    insets = Insets(50)
  }

  static Void listen(Widget w, Str name)
  {
    d := |e| { dump(e, name) }
    w.onMouseUp.add(d)
    w.onMouseDown.add(d)
    w.onMouseEnter.add(d)
    w.onMouseExit.add(d)
    w.onMouseWheel.add(d)
  }

  static Void dump(Event event, Str name)
  {
    echo("$name> $event")
    event.consume()
  }
}